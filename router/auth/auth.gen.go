// Package auth_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package auth_gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	models "github.com/Dhar01/incident_resp/internal/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	googleuuid "github.com/google/uuid"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Auth defines model for Auth.
type Auth = models.AuthReq

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Auth *Auth `json:"auth,omitempty"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	UserId *googleuuid.UUID `json:"user_id,omitempty"`
}

// User defines model for User.
type User = models.User

// LogInJSONRequestBody defines body for LogIn for application/json ContentType.
type LogInJSONRequestBody = LoginRequest

// CreateUserAuthJSONRequestBody defines body for CreateUserAuth for application/json ContentType.
type CreateUserAuthJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user
	// (POST /auth/login)
	LogIn(c *gin.Context)
	// Register a new user
	// (POST /auth/signup)
	CreateUserAuth(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// LogIn operation middleware
func (siw *ServerInterfaceWrapper) LogIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LogIn(c)
}

// CreateUserAuth operation middleware
func (siw *ServerInterfaceWrapper) CreateUserAuth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUserAuth(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/login", wrapper.LogIn)
	router.POST(options.BaseURL+"/auth/signup", wrapper.CreateUserAuth)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXQW/bOBP9KwS/7yhbcupkW5+aJlvARbII4gQ9FEFAkyOJrUSyJJXUW+i/L4ZUHCuy",
	"mgDbXPaUiJwZzrx580j/pFzXRitQ3tHFT2rBGa0chI8PTFzC9wac/9NabXFJgONWGi+1ogu6VHeskoJI",
	"ZRqfkDUTxEYH2ib0RKu8knzMmXfb5F76kvgSiAN7B5Y4zzxggKXyYBWrVmF9NIdo9OANwaxN6F/af9SN",
	"EiN+eErjiNKe5GiGLteKNb7UVv4N4phzcG7EedeQsGBJ2zahjpdQswDeceNL/GusNmC9jJBCzWQV/vnB",
	"alMBXdDGgX3ffU65rmlCc21r5umiM0+o3xgIOVupCszUMOfutRX9UCvgjYWL987NDt7sxtmaJ7SW6gxU",
	"gcm9HQRuE4oNlBYEXXzZHr91v9l66PVX4J4m9Mek0JNusdYCKjfF0i/h++7mRNZGW4/pKlY/2obgmAst",
	"pC+bNQKQnpbMZrNUKi4FKH+LpExl1+c0OIZUz3QhVcfQ/z7UjwXHER1WHIl46/U3UEPOfvp81VGVRIvn",
	"UuqF25fOJRTSebCjLWDdDPzfQk4X9H/po9ik3aikYU7w6F+EHysY+3krn3Tm8DCDt/Msm8DBu/VkPhPz",
	"CftjdjSZz4+ODg/n8yzLst2GFVoXFTSNFANE+ux+NJxeXy9Pf03vXtQhxeN2GvbbvdVfOwjC84J5C6av",
	"O2yobch46TcrbFx3QQCzYB+Ubh2+Pj7g+unzFe0UEVOIu48Ql96bGFiqXA/penyxJLm2BDlEPNIroZXk",
	"0BGhK+x8eYVgeelD7zEVcs4UK6AG5cnxxZIm9A6si0GzaTadBag0M3LCtYAC1KSWQlRwzyyW9YWe73ze",
	"DIwDwjUzRqoishCbONbdSBUsUxtQzEi6oG+m2TTrmhEipFhkWuF0B5LrOEx9QM50QaQijCDrSeOkKkhQ",
	"DcKUIA+6MSXHucdLtAnTmzdVtSEhckJ4JRGUe1lVxAIHeQc9RQiBLOQWXLnVCJw3hiksT+mCVrpY9ldF",
	"TC2sdpf/By02mD/XyoMKpTBjKsmDR/rV6VBmVIDn9KEn8m1fo7xtICzsPFoOsux3n93JTzi835PVFuWI",
	"MU1oCUyADamswE9OtP4mYdjNy12YCY9WyU5eT7UZD5/H2valvMUgffpqC36z5/3GHj/Bf/68f/+91Sb0",
	"8CXZ7nvjBbVp6prZzVPeo36wIkypadaV5PQGreMAOVmoxoxP0MOFQhhRcB/nKDw+h2M0oPiJBeYBlTbI",
	"3etw/emF+iK6z17h+HHGIwKEBzAEWe2IzJRcVMAckDuwMt9M6b/i67vn/fo/L34f3/awZC/r2vafAAAA",
	"//+MMHQxPQ0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
