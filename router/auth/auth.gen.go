// Package auth_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package auth_gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	models "github.com/Dhar01/incident_resp/internal/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	googleuuid "github.com/google/uuid"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	UserId *googleuuid.UUID `json:"user_id,omitempty"`
}

// User defines model for User.
type User = models.User

// LogInJSONRequestBody defines body for LogIn for application/json ContentType.
type LogInJSONRequestBody = LoginRequest

// CreateUserAuthJSONRequestBody defines body for CreateUserAuth for application/json ContentType.
type CreateUserAuthJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user
	// (POST /auth/login)
	LogIn(c *gin.Context)
	// Register a new user
	// (POST /auth/signup)
	CreateUserAuth(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// LogIn operation middleware
func (siw *ServerInterfaceWrapper) LogIn(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LogIn(c)
}

// CreateUserAuth operation middleware
func (siw *ServerInterfaceWrapper) CreateUserAuth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUserAuth(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/login", wrapper.LogIn)
	router.POST(options.BaseURL+"/auth/signup", wrapper.CreateUserAuth)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWQW/bOBP9KwS/7yhLcupkW5+aJlvARbII4gQ9FEFAkyNpWonkklRSb6D/viCpOJZl",
	"bwpse9qbRM4M37yZeeQT5arRSoJ0ls6fqAGrlbQQfj4wcQ1/tmDd78Yo45cEWG5QO1SSzulCPrAaBUGp",
	"W5eQFRPERAfaJfRMyaJGfsiZ99vkEV1FXAXEgnkAQ6xjDnyAhXRgJKuXYf0ghmj07A3BrEvoH8p9VK0U",
	"B/z8Ka0lUjlSeDPvcitZ6ypl8C8Qp5yDtQectw0JC5a06xJqeQUNC+RdqBJlT5//10ZpMA4jtdAwrMPH",
	"d9boGuicthbM+/435aqhCS2UaZij8948oW6tIWA3KEuPWDNrH5URw1BL4K2Bq/fWTo/ebMfZmCe0QXkB",
	"snQVnb8dBe4S6guJBgSdf9kcv3G/23io1Vfgodx9wrF/xhlHlu6d+gZyTOinzzc9jyRavAZpEG4fnGso",
	"0Tow/6USvOR8qAo+w3vcwXp8nMPbWZ5P4OjdajKbitmE/TY9mcxmJyfHx7NZnuf5dgqlUmUNbYtixEdC",
	"v09KNekXXwzT29vF+fbuBButTCiLZA3sRtXMs0JLdFW78qXI4nYW9jvPzij7WwthVIcbQ0SNElDbNJj+",
	"I5pouBfJecVMPs1QchQg3b3XzAx7GcqCY0RofQ+gWy+9KvSSCsyAOW19zCe6Cn8fn3n99PmG9hriIcTd",
	"F4or53QMjLJQ4xk6vVqQQhnipYk43/MJrZFD3wh9YpeLG0+WQxdq76GQSyZZCQ1IR06vFjShD2BsDJqn",
	"eToNVCmmccKVgBLkpEEhanhkxqf1hV5u/d6NjAPDDdMaZRm70BfxUHVjq/g0lQbJNNI5fZPmad4XI0TI",
	"fJJZ7SUnNLmKEz4k5EKVBCVhxHc9aS3KkoQ5IkwK8jxJKTktnL922iApRVvXaxIiJ4TX6El5xLomBjjg",
	"AwxkKgQyUBiw1Ua4/LwxD2FxTue0VuViuCoitLDaX5cflFh7/FxJBzKkwrSukQeP7KtVIc14vfiv/xso",
	"6Jz+L3u5vrP+8skGN083FBJnWggLW9f8UZ7/7LN7+QmHD2uy3LAcOaYJrYAJMAHKEtzkTKlvCONqXm/T",
	"THi0SrZw7QqoP3wWc9sHecNBtvvOCX7T1/0OPReC/+x1/+ELpUvo8Y+g3fcqCmrTNg0z692+9/rByjCl",
	"ul3VyOmdt44DZLGUrT48Qc8XCmFEwmOco/BcG4/RqMXPDDAHXmmD3P2aXt+95X+o3ae/4PjDHe8ZIDyQ",
	"IchyS2RSclUDs0AewGCxTum/6td3r/sNH+Q/r9/2dMneruu6vwMAAP//4WOfrG8MAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
