openapi: 3.0.0

info:
    title: Auth Management API
    description: API for auth test
    version: 0.0.1
    license:
        name: MIT
    x-oapi-codegen-middlewares:
        - Middlewares
    x-oapi-codegen-type-mappings:
        uuid: github.com/google/uuid.UUID

servers:
    - url: http://localhost:8999/api/v1

paths:

    /auth/signup:

        # POST /api/v1/auth/signup
        post:
            summary: Register a new user
            description: Register a new user with email and password
            operationId: createUserAuth
            tags:
                - public
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RegisterRequest'
            responses:
                "201":
                    description: User created Successfully. Please verify.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RegisterResponse'
                "400":
                    $ref: '#/components/responses/BadRequestError'
                "409":
                    $ref: '#/components/responses/ConflictError'
                "500":
                    $ref: '#/components/responses/InternalServerError'


    /auth/login:

        # POST /api/v1/auth/login
        post:
            summary: Log in a user
            description: Log in a user using email and password. After successfully login, client will receive access token and refresh token
            operationID: logIn
            tags:
                - public
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginRequest'
            responses:
                "200":
                    description: Successful login
                    headers:
                        Set-Cookie:
                            description: Refresh token cookie
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginResponse'
                "400":
                    $ref: '#/components/responses/BadRequestError'
                "401":
                    $ref: '#/components/responses/UnauthorizedAccessError'
                "404":
                    $ref: '#/components/responses/NotFoundError'
                "500":
                    $ref: '#/components/responses/InternalServerError'

components:

    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    responses:
        InternalServerError:
            description: Internal server error

        BadRequestError:
            description: Invalid input, bad request

        UnauthorizedAccessError:
            description: Unauthorized access

        NotFoundError:
            description: status not found

        ConflictError:
            description: conflict with the server state


    schemas:
        User:
            x-go-type: models.User
            x-go-type-import:
                name: models
                path: github.com/Dhar01/incident_resp/internal/model
            type: object

        Auth:
            x-go-type: models.AuthReq
            x-go-type-import:
                name: models
                path: github.com/Dhar01/incident_resp/internal/model
            type: object
            required:
                - email
                - password
            properties:
                email:
                    type: string
                    format: email
                    example: 'user@example.com'
                password:
                    type: string
                    format: password
                    minLength: 8
                    example: 'SecureP@ss123'

        RegisterRequest:
            type: object
            properties:
                auth:
                    $ref: '#/components/schemas/Auth'

            # required:
            #     - email
            #     - password
            # properties:
            #     email:
            #         type: string
            #         format: email
            #         example: 'user@example.com'
            #     password:
            #         type: string
            #         format: password
            #         minLength: 8
            #         example: "SecureP@ss123"

        RegisterResponse:
            type: object
            properties:
                user_id:
                    type: string
                    format: googleuuid
                    example: '550e8400-e29b-41d4-a716-446655440000'
                    x-go-type: googleuuid.UUID
                    x-go-type-import:
                        path: github.com/google/uuid
                        name: googleuuid

        LoginRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: 'user@example.com'
                password:
                    type: string
                    format: password
                    minLength: 8
                    example: 'SecureP@ss123'
            required:
                - email
                - password

        LoginResponse:
            type: object
            required:
                - access_token
            properties:
                access_token:
                    type: string
                    description: JWT access token
