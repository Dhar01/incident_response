// Package incident_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package incident_gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	models "github.com/Dhar01/incident_resp/internal/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for SeverityType.
const (
	Critical SeverityType = "critical"
	High     SeverityType = "high"
	Low      SeverityType = "low"
	Medium   SeverityType = "medium"
)

// Defines values for StatusType.
const (
	Acknowledged StatusType = "acknowledged"
	Closed       StatusType = "closed"
	Open         StatusType = "open"
)

// Incident defines model for Incident.
type Incident = models.IncidentReq

// SeverityType defines model for SeverityType.
type SeverityType string

// StatusType defines model for StatusType.
type StatusType string

// CreateNewIncidentJSONRequestBody defines body for CreateNewIncident for application/json ContentType.
type CreateNewIncidentJSONRequestBody = Incident

// UpdateIncidentJSONRequestBody defines body for UpdateIncident for application/json ContentType.
type UpdateIncidentJSONRequestBody = Incident

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all incidents
	// (GET /incidents)
	FetchIncidents(c *gin.Context)
	// Create a new incident
	// (POST /incidents)
	CreateNewIncident(c *gin.Context)
	// get one incident
	// (GET /incidents/{id})
	FetchIncidentByID(c *gin.Context, id uint64)
	// Update an incident
	// (PUT /incidents/{id})
	UpdateIncident(c *gin.Context, id uint64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// FetchIncidents operation middleware
func (siw *ServerInterfaceWrapper) FetchIncidents(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FetchIncidents(c)
}

// CreateNewIncident operation middleware
func (siw *ServerInterfaceWrapper) CreateNewIncident(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNewIncident(c)
}

// FetchIncidentByID operation middleware
func (siw *ServerInterfaceWrapper) FetchIncidentByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FetchIncidentByID(c, id)
}

// UpdateIncident operation middleware
func (siw *ServerInterfaceWrapper) UpdateIncident(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateIncident(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/incidents", wrapper.FetchIncidents)
	router.POST(options.BaseURL+"/incidents", wrapper.CreateNewIncident)
	router.GET(options.BaseURL+"/incidents/:id", wrapper.FetchIncidentByID)
	router.PUT(options.BaseURL+"/incidents/:id", wrapper.UpdateIncident)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW227jNhD9FWLaR8ay27To6i2XBnDRXSxyQR+CYEGTY4lbidSSQ3vdQP9ekJJtqbGT",
	"tAV22yfrMnM8M+fMER9B2rqxBg15yB/BoW+s8ZhuzoW6xk8BPf3snHXxkUIvnW5IWwM5zM1KVFoxbZpA",
	"nC2EYq5LgJbDhTXLSstjydvXbK2pZFQik8E5NMQ8uhU65kkQRqC5IXRGVDfp+dFauqBtNqawlsM7S1c2",
	"GHUk7xq9DU4iM5bYMgbGpDsjApXW6T9QnUmJ3h9JHwYykSKhbTl4WWIt0hjnRmqFhuJ142yDjnQ3YOG9",
	"LgyqD2TjLX4WdVMh5LPpjMPSuloQ5BC0oR9PgQNtGoQctCEsMPU2qmUAALclssZZFWR8t52J9iwYh0KW",
	"YlHhHtGT06aIgB5X6DRtItq3DpeQwzfZXiJZ31Z208fdRoCYR4KCfzErRW1zSFOsdVh2xzC7tGvztLqW",
	"Q1SXdqggv+/Td389qJ2PBvuwA7KLjygJOHw+KexJ/7C2Cis/2ZJ0jZ+GASe6bqxL1BlR7+OBQyOohBwK",
	"TWVYTKSts8tSuOks0z3Uh7hMme51maXE1MVoeLF/E+rYUWXXwKFGpUMNHEpdlMBBOk1aimrQyJ6vwUQH",
	"QLbBOD8hfzd2XaEqUEWgynpUB2AS7zLEkm4iU/32o3DozkLs8hEW6e5qq8lffruFXuQRqXu7p6wkaqCN",
	"wNos7dOtOXs/Z0vr2HZUjKJncKi0RONxMO6389uBVna7xN4KIwqs4+XZ+zlwWKHzHfh0Mp3MEolWNPpE",
	"WoUFmo7OWjSNNkVqMAStxgQW1hYVZvHF5O5ufplGE4cpGg05fD+ZTqY98wlhR3W6K5CedlppT0xUFRMr",
	"oau4dmyflMCdiKHzWMoVkizng9cjO/5uOo0/0hrq3UQ0TaVlys8++s4Dul2LV5qwfnEld+bU7sgTzolN",
	"x964l19jL3Y5aKDlcDqdHfuPXfXZMTttOfzQdfV8/qEvwFC2kN+PBXv/0D5w8KGuhdtEkrFjYTh7ElEH",
	"97B9Bg8th8b6AyxKh4KQCWZwvRdt+nDVSEIJEk/IvEg573C9G3HnX+jp3KrN36LydQyOHZJcwPaJhGaH",
	"vpx9P12XivmQKFqGqtp0FL+Cor8eFv430rg4xO1hebR8sPLZo1bt0b1fxlVm1uzXnS02TJNnWj2/9+eb",
	"+WUyGSdqJHQ+daAjaPrk8K01JqAx33ygmZfPD3EO/8BhXilGfkxmu0PWv9XH6fT05fzx8e+LGs6Q/aN+",
	"E9Kcx3q4a5QgHPjGFxPD17an6TP2FNJU1Nd0pP+y4jrRMGH2mms7gAjYCSe4qj+d5VlWWSmq0nrKf3rz",
	"5k0mGp2tZtA+tH8GAAD//ycq+pEVDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
