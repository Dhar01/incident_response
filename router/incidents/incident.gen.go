// Package incident_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package incident_gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	models "github.com/Dhar01/incident_resp/internal/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for SeverityType.
const (
	Critical SeverityType = "critical"
	High     SeverityType = "high"
	Low      SeverityType = "low"
	Medium   SeverityType = "medium"
)

// Defines values for StatusType.
const (
	Acknowledged StatusType = "acknowledged"
	Closed       StatusType = "closed"
	Open         StatusType = "open"
)

// Incident defines model for Incident.
type Incident = models.IncidentReq

// SeverityType defines model for SeverityType.
type SeverityType string

// StatusType defines model for StatusType.
type StatusType string

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /incidents)
	GetIncidents(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetIncidents operation middleware
func (siw *ServerInterfaceWrapper) GetIncidents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetIncidents(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/incidents", wrapper.GetIncidents)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4RUYW/bNhD9K8RtHxXL2TBg0bdsXQcP6FA0CfahCAqGPEu3STyWPDntDP334WjZltEE",
	"+yaS7z3dvcfjHhwPkQMGydDsIWGOHDKWxS/Wf8DPI2b5LSVOuuUxu0RRiAM0sAk725M3FOIolXmy3qQD",
	"AaYKfuWw7cm9RnbzsXkm6Yx0aDKmHSaTxQqqwCYIpmD7u7L/ag0H0JGNBTZV8CfLWx6Df4WnfxmzCSxm",
	"qzClPAQ7SseJ/kV/6xzm/Ap5CTS2IGGaKsiuw8EW8zbBkccg+h0TR0xCB1ttztQG9J+EdYlf7BB7hOa6",
	"AvkaERqgUAy8+OcCCNJRNi1jNsJmiTopZEkUWhXJuMNE8lUVvk+4hQa+q8+h13PJ9d2Mu1cB5RV//pdV",
	"UEeOkGh9y1LveEDpKLSmszFiQP9tkVMFem0ooYfm46xyqmDRQnXh3eNJiJ/+RidQwZerlq/mzYE99nl1",
	"zOEDfl4CrmiInEo6wQ5nPFQQrXTQQEvSjU8rx0P9prNpfV3TLPVJp6Sm+eLVhVi6uPBQbQjjoB31/AwV",
	"DOhpHKCCjtoOKnCJhJztF42cY1sYuxDiiBqydf8Efu7Rt8VO13NG/4JMid+NWtKdBjaPNdqE6XbULvfw",
	"VFZvOQ1WoIE//rqH+R6r0uH0HFknEmFSYQpb/nYwbt9vzJaTOVplRB+DCnpyGDIu7H63uV9cmdO4mHc2",
	"2BYH/bx9v4EKdpjyQXy9Wq+uS4hsI1059thiOMQ52BgptKXBcSR/GWDL3PZY68Hq4WHzplijZtpI0MCP",
	"q/VqPSdfFE5Rl1WL5Z7oDFvtc6Pqv6NsTqDq8uH8Yb1+4cEZ53eigp8O5y8N1kmnfun107LFapcf4Vgi",
	"POruueJ6T36CZn9IX7kK38OY+jnApq57drbvOEvz883NTW0j1btrmB6n/wIAAP//6QXIBBEGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
