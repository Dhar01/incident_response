// Package incident_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package incident_gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	models "github.com/Dhar01/incident_resp/internal/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for SeverityType.
const (
	Critical SeverityType = "critical"
	High     SeverityType = "high"
	Low      SeverityType = "low"
	Medium   SeverityType = "medium"
)

// Defines values for StatusType.
const (
	Acknowledged StatusType = "acknowledged"
	Closed       StatusType = "closed"
	Open         StatusType = "open"
)

// Incident defines model for Incident.
type Incident = models.IncidentReq

// SeverityType defines model for SeverityType.
type SeverityType string

// StatusType defines model for StatusType.
type StatusType string

// CreateNewIncidentJSONRequestBody defines body for CreateNewIncident for application/json ContentType.
type CreateNewIncidentJSONRequestBody = Incident

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all incidents
	// (GET /incidents)
	FetchIncidents(c *gin.Context)
	// Create a new incident
	// (POST /incidents)
	CreateNewIncident(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// FetchIncidents operation middleware
func (siw *ServerInterfaceWrapper) FetchIncidents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FetchIncidents(c)
}

// CreateNewIncident operation middleware
func (siw *ServerInterfaceWrapper) CreateNewIncident(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNewIncident(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/incidents", wrapper.FetchIncidents)
	router.POST(options.BaseURL+"/incidents", wrapper.CreateNewIncident)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVTW/bOBD9K8TsHhXL3g9go1uabgAv0KJoEuyhCIoxOZbYUiRLjuxmA/33BSnZltc2",
	"sofeTM68p5n3OOMXkK71zpLlCNULBIre2Uj58AbVR/rWUeQ/Q3AhXSmKMmjP2lmoYGk3aLQS2vqOC7FC",
	"JcIAgL6AW2fXRstLYDmGxVZzI7ghESlsKIjIyJQIlpYpWDT3+f5iDUPSDk05rS/gveM711l1AZe+0kVh",
	"HYt1SkuQR4sdNy7of0jdSEkxXgBPEwXmTOj7AqJsqMUs3tJKrchy+u2D8xRYD7JijLq2pD6zS0f6jq03",
	"BNWiAH72BBVomwU8+uYkEbjRUdSOomAnpll7hshB2zqRRNpQ0PycGH4OtIYKfioPppdjyeX9mPeQCBIu",
	"6/MqKmftMKw51Tct9d61xI22tWjQe7KkTovsC0jPRgdSUH0aWfYVTFoojrR72hO51ReSDAV8v6rd1XjZ",
	"OkUmznY+fKRv04Qr3XoXsjsW20M+FOCRG6ig1tx0q5l0bfm2wTBflHqk+pympNTjwyszMHdxpGGSwXZt",
	"6si4LRTQktJdCwU0um6gABk0a4lm0sjBtomwEyLnKZmM8qt1W0OqznJK4yKpMzTZftmlku6TYeNYEwYK",
	"N13q8gVW+XTnQosMFfz19wOM7zgxDdGDZQ2zhz4Ra7t2p4Nx82Ep1i6InVSC0zIowGhJNtJE7nfLh8mT",
	"2Y+LeIcWa2rTz5sPSyhgQyEO5PPZfLbIJjr0+ko6RTXZwc4Wvde2zg12nVbHBtbO1YbKFJg9Pi7fZmmS",
	"mOg1VPDrbD6bj85nhr3V+VQTn3ZqdGSBxgjcoDa4MiQOoEweMKUuUyl3xLJZTsJHe/aX+fyU331N8vw+",
	"hM6N4J6iPLcns/dd22J4TlLQUOu0Qsak1ifY3cFTX4B38UyvMhAyCRSWtgdr895uiVEh40nLtxnznrb7",
	"RThMOUV+41ReR9JZHjckem+0zOjySxz23bBjXttAe/r+eI9w6Kg/EXpxqbm8/3/7P2r/91/xx7l0e07m",
	"804No52IUuQFumDG6azK0jiJpnGRqz+ur69L9LrcLKB/6v8NAAD//yWFKkvuBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
