// Package incident_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package incident_gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	models "github.com/Dhar01/incident_resp/internal/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for SeverityType.
const (
	Critical SeverityType = "critical"
	High     SeverityType = "high"
	Low      SeverityType = "low"
	Medium   SeverityType = "medium"
)

// Defines values for StatusType.
const (
	Acknowledged StatusType = "acknowledged"
	Closed       StatusType = "closed"
	Open         StatusType = "open"
)

// Incident defines model for Incident.
type Incident = models.IncidentReq

// SeverityType defines model for SeverityType.
type SeverityType string

// StatusType defines model for StatusType.
type StatusType string

// CreateNewIncidentJSONRequestBody defines body for CreateNewIncident for application/json ContentType.
type CreateNewIncidentJSONRequestBody = Incident

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get all incidents
	// (GET /incidents)
	FetchIncidents(c *gin.Context)
	// Create a new incident
	// (POST /incidents)
	CreateNewIncident(c *gin.Context)
	// get one incident
	// (GET /incidents/{id})
	FetchIncidentByID(c *gin.Context, id uint64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// FetchIncidents operation middleware
func (siw *ServerInterfaceWrapper) FetchIncidents(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FetchIncidents(c)
}

// CreateNewIncident operation middleware
func (siw *ServerInterfaceWrapper) CreateNewIncident(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNewIncident(c)
}

// FetchIncidentByID operation middleware
func (siw *ServerInterfaceWrapper) FetchIncidentByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FetchIncidentByID(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/incidents", wrapper.FetchIncidents)
	router.POST(options.BaseURL+"/incidents", wrapper.CreateNewIncident)
	router.GET(options.BaseURL+"/incidents/:id", wrapper.FetchIncidentByID)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW32/bNhD+V4jbHhnL3rJh1VuaLICHtSjyA3sIgoImzxI7ilTJo10v0P8+kJJtebGb",
	"bAMG7Mkmeffp7r7vjnwC6ZrWWbQUoHwCj6F1NmBevBXqBj9HDPSz986nLYVBet2SdhZKmNuVMFoxbdtI",
	"nC2EYr53gI7DpbNLo+Up5+0xW2uqGdXIZPQeLbGAfoWeBRKECWhuCb0V5jbvn4ylN9p6YzbrOLx3dO2i",
	"VSf8bjC46CUy64gtk2FyurciUu28/gPVhZQYwgn3sSET2RK6jkOQNTYil3FupVZoKf1vvWvRk+4LLELQ",
	"lUX1kVxa4hfRtAahnE1nHJbON4KghKgt/XgOHGjTIpSgLWGFObeDWEYAcFcja71TUaazbU10YNF6FLIW",
	"C4N7xEBe2yoBBlyh17RJaN96XEIJ3xR7iRRDWsXtYHeXAJIfCYrhRa9stfUhTSnWcdg9w+zKre3z6DoO",
	"SV3ao4LyYXDffXoUOz8o7OMOyC0+oSTg8OWscmfDZuMUmjDZknSDn8cGZ7ppnc/UWdHs7YFDK6iGEipN",
	"dVxMpGuKq1r46azQA9TH1EyFHnRZZMecxUHxUv42Nikj49bAoUGlYwMcal3VwEF6TVoKM0pkz9eooiMg",
	"12Kqn5C/W7c2qCpUCci4gOoITOZdxhTSbWJq6H4UHv1FTFk+wSKvrrea/OW3OxhEnpD60z1lNVELXQLW",
	"dumed83FhzlbOs+2pWKUZgYHoyXagKNyv5vfjbSy6yX2TlhRYZP+XnyYA4cV+tCDTyfTySyT6ESrz6RT",
	"WKHt6WxE22pb5QRj1OqQwMq5ymCRDib39/OrXJpUTNFqKOH7yXQyHZjPCDuq86pCep6p0YGYMIaJldAm",
	"tR3bO2VwL5LpPIVyjSTr+ej4YBx/N52mH+ksDdNEtK3RMvsXn0I/A/peS/80YfNiS+6GU7cjT3gvNj17",
	"h7n8mnJxy1ECHYfz6ezUN3bRF6fGacfhhz6rr/sfuwHGsoXy4VCwD4/dI4cQm0b4TSIZexbGtSeRdPAA",
	"2z147Di0LhxhUXoUhEwwi+u9aPPF1SAJJUg8I/My+7zH9a7E/fzCQG+d2vwtKl/H4OGEJB+xeyah2bGb",
	"c8inz1KxEDNFy2jMpqf4FRT99bHwv5HG5TFuj8uj46OWL5606k72/TK1MnN23+5ssWGaAtPq633/djO/",
	"ykPGiwYJfcgZ6ASarxy+HY0Z6JBvPtLMy++HVId/MGFeKUZ+Sma7R9a/1cf59Pxl/8Pn3386cMbsnxBU",
	"hkyf6FmO3gy3Z1kUxklhaheo/OnNmzeFaHWxmkH32P0ZAAD//7D9hjm1CwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
